{"ast":null,"code":"var _jsxFileName = \"/home/ankit/Desktop/Ankit/May/may-10/Stackoverflow-Clone-Frontend/src/pages/Post/AnswerSection/AnswerSection.component.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { Fragment, useState, useEffect } from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { getAnswers } from '../../../redux/answers/answers.actions';\nimport handleSorting from '../../../services/handleSorting';\nimport AnswerItem from './AnswerItem/AnswerItem.component';\nimport Spinner from '../../../components/Spinner/Spinner.component';\nimport AnswerForm from './AnswerForm/AnswerForm.component';\nimport ButtonGroup from '../../../components/ButtonGroup/ButtonGroup.component';\nimport './AnswerSection.styles.scss';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst AnswerSection = _ref => {\n  _s();\n\n  var _answer$answers;\n\n  let {\n    getAnswers,\n    answer,\n    post: {\n      post\n    }\n  } = _ref;\n  useEffect(() => {\n    getAnswers(post.id); // eslint-disable-next-line\n  }, [getAnswers]);\n  const [sortType, setSortType] = useState('Newest');\n  return /*#__PURE__*/_jsxDEV(Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"answer\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"answer-header fc-black-800\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"answer-sub-header\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"answer-headline\",\n            children: /*#__PURE__*/_jsxDEV(\"h2\", {\n              children: \"Answers\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 28,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 27,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(ButtonGroup, {\n            buttons: ['Newest', 'Oldest'],\n            selected: sortType,\n            setSelected: setSortType\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 30,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 26,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 9\n      }, this), answer.loading === null ? /*#__PURE__*/_jsxDEV(Spinner, {\n        width: \"25px\",\n        height: \"25px\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 11\n      }, this) : (_answer$answers = answer.answers) === null || _answer$answers === void 0 ? void 0 : _answer$answers.sort(handleSorting(sortType)).map((answer, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"answers\",\n        children: /*#__PURE__*/_jsxDEV(AnswerItem, {\n          answer: answer\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 15\n        }, this)\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 13\n      }, this)), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"add-answer\",\n        children: /*#__PURE__*/_jsxDEV(AnswerForm, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 23,\n    columnNumber: 5\n  }, this);\n};\n\n_s(AnswerSection, \"uWQvnQ4G0gK5XHrkCTdOxabq/WU=\");\n\n_c = AnswerSection;\nAnswerSection.propTypes = {\n  getAnswers: PropTypes.func.isRequired,\n  answer: PropTypes.object.isRequired,\n  post: PropTypes.object.isRequired\n};\n\nconst mapStateToProps = state => ({\n  answer: state.answer,\n  post: state.post\n});\n\nexport default connect(mapStateToProps, {\n  getAnswers\n})(AnswerSection);\n\nvar _c;\n\n$RefreshReg$(_c, \"AnswerSection\");","map":{"version":3,"sources":["/home/ankit/Desktop/Ankit/May/may-10/Stackoverflow-Clone-Frontend/src/pages/Post/AnswerSection/AnswerSection.component.jsx"],"names":["React","Fragment","useState","useEffect","connect","PropTypes","getAnswers","handleSorting","AnswerItem","Spinner","AnswerForm","ButtonGroup","AnswerSection","answer","post","id","sortType","setSortType","loading","answers","sort","map","index","propTypes","func","isRequired","object","mapStateToProps","state"],"mappings":"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","sourcesContent":["import React, {Fragment, useState, useEffect} from 'react';\nimport {connect} from 'react-redux';\nimport PropTypes from 'prop-types';\nimport {getAnswers} from '../../../redux/answers/answers.actions';\nimport handleSorting from '../../../services/handleSorting';\n\nimport AnswerItem from './AnswerItem/AnswerItem.component';\nimport Spinner from '../../../components/Spinner/Spinner.component';\nimport AnswerForm from './AnswerForm/AnswerForm.component';\nimport ButtonGroup from '../../../components/ButtonGroup/ButtonGroup.component';\n\nimport './AnswerSection.styles.scss';\n\nconst AnswerSection = ({getAnswers, answer, post: {post}}) => {\n  useEffect(() => {\n    getAnswers(post.id);\n    // eslint-disable-next-line\n  }, [getAnswers]);\n\n  const [sortType, setSortType] = useState('Newest');\n\n  return (\n    <Fragment>\n      <div className='answer'>\n        <div className='answer-header fc-black-800'>\n          <div className='answer-sub-header'>\n            <div className='answer-headline'>\n              <h2>Answers</h2>\n            </div>\n            <ButtonGroup\n              buttons={['Newest', 'Oldest']}\n              selected={sortType}\n              setSelected={setSortType}\n            />\n          </div>\n        </div>\n        {answer.loading === null ? (\n          <Spinner width='25px' height='25px' />\n        ) : (\n          answer.answers?.sort(handleSorting(sortType)).map((answer, index) => (\n            <div key={index} className='answers'>\n              <AnswerItem answer={answer}/>\n            </div>\n          ))\n        )}\n        <div className='add-answer'>\n          <AnswerForm/>\n        </div>\n      </div>\n    </Fragment>\n  );\n};\n\nAnswerSection.propTypes = {\n  getAnswers: PropTypes.func.isRequired,\n  answer: PropTypes.object.isRequired,\n  post: PropTypes.object.isRequired,\n};\n\nconst mapStateToProps = (state) => ({\n  answer: state.answer,\n  post: state.post,\n});\n\nexport default connect(mapStateToProps, {getAnswers})(AnswerSection);\n"]},"metadata":{},"sourceType":"module"}