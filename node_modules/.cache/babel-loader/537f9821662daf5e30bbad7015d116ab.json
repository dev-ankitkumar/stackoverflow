{"ast":null,"code":"var _jsxFileName = \"/home/ankit/Desktop/Ankit/May/may-10/Stackoverflow-Clone-Frontend/src/pages/Post/AnswerSection/AnswerForm/AnswerForm.component.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { Fragment, useState, useRef } from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { addAnswer } from '../../../../redux/answers/answers.actions';\nimport LinkButton from '../../../../components/LinkButton/LinkButton.component';\nimport MarkdownEditor from '../../../../components/MarkdownEditor/MarkdownEditor.component';\nimport './AnswerForm.styles.scss';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst AnswerForm = _ref => {\n  _s();\n\n  let {\n    addAnswer,\n    auth,\n    post: {\n      post\n    }\n  } = _ref;\n  const [formData, setFormData] = useState({\n    text: ''\n  });\n  const markdownEditorRef = useRef(null);\n  const {\n    text\n  } = formData;\n\n  const handleSubmit = async e => {\n    e.preventDefault();\n    addAnswer(post.id, {\n      text\n    });\n    setFormData({\n      text: ''\n    });\n    markdownEditorRef.current.cleanEditorState();\n  };\n\n  const updateConvertedContent = htmlConvertedContent => {\n    setFormData({ ...formData,\n      text: htmlConvertedContent\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(Fragment, {\n    children: !auth.loading && auth.isAuthenticated ? /*#__PURE__*/_jsxDEV(Fragment, {\n      children: /*#__PURE__*/_jsxDEV(\"form\", {\n        className: \"answer-form\",\n        onSubmit: e => handleSubmit(e),\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"answer-grid\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            className: \" fc-black-800\",\n            children: \"Your Answer\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 39,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"s-textarea rich-text-editor-container\",\n            children: /*#__PURE__*/_jsxDEV(MarkdownEditor, {\n              ref: markdownEditorRef,\n              onChange: updateConvertedContent\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 41,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 40,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"s-btn s-btn__primary\",\n            children: \"Post Your Answer\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 46,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 38,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(Fragment, {\n      children: /*#__PURE__*/_jsxDEV(LinkButton, {\n        text: 'You need to login to add an answer',\n        link: '/login',\n        type: 's-btn__outlined',\n        marginTop: '12px'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 5\n  }, this);\n};\n\n_s(AnswerForm, \"PQX012jpEYOSnFulyIKJvprTW78=\");\n\n_c = AnswerForm;\nAnswerForm.propTypes = {\n  auth: PropTypes.object.isRequired,\n  addAnswer: PropTypes.func.isRequired,\n  post: PropTypes.object.isRequired\n};\n\nconst mapStateToProps = state => ({\n  auth: state.auth,\n  post: state.post\n});\n\nexport default connect(mapStateToProps, {\n  addAnswer\n})(AnswerForm);\n\nvar _c;\n\n$RefreshReg$(_c, \"AnswerForm\");","map":{"version":3,"sources":["/home/ankit/Desktop/Ankit/May/may-10/Stackoverflow-Clone-Frontend/src/pages/Post/AnswerSection/AnswerForm/AnswerForm.component.jsx"],"names":["React","Fragment","useState","useRef","connect","PropTypes","addAnswer","LinkButton","MarkdownEditor","AnswerForm","auth","post","formData","setFormData","text","markdownEditorRef","handleSubmit","e","preventDefault","id","current","cleanEditorState","updateConvertedContent","htmlConvertedContent","loading","isAuthenticated","propTypes","object","isRequired","func","mapStateToProps","state"],"mappings":"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","sourcesContent":["import React, {Fragment, useState, useRef} from 'react';\nimport {connect} from 'react-redux';\nimport PropTypes from 'prop-types';\nimport {addAnswer} from '../../../../redux/answers/answers.actions';\n\nimport LinkButton from '../../../../components/LinkButton/LinkButton.component';\nimport MarkdownEditor from '../../../../components/MarkdownEditor/MarkdownEditor.component';\n\nimport './AnswerForm.styles.scss';\n\nconst AnswerForm = ({addAnswer, auth, post: {post}}) => {\n  const [formData, setFormData] = useState({\n    text: '',\n  });\n\n  const markdownEditorRef = useRef(null);\n\n  const {text} = formData;\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    addAnswer(post.id, {text});\n    setFormData({\n      text: '',\n    });\n    markdownEditorRef.current.cleanEditorState();\n  };\n\n  const updateConvertedContent = (htmlConvertedContent) => {\n    setFormData({...formData, text: htmlConvertedContent});\n  };\n\n  return (\n    <Fragment>\n      {!auth.loading && auth.isAuthenticated ? (\n        <Fragment>\n          <form className='answer-form' onSubmit={(e) => handleSubmit(e)}>\n            <div className='answer-grid'>\n              <label className=' fc-black-800'>Your Answer</label>\n              <div className='s-textarea rich-text-editor-container'>\n                <MarkdownEditor\n                  ref={markdownEditorRef}\n                  onChange={updateConvertedContent}\n                />\n              </div>\n              <button className='s-btn s-btn__primary'>Post Your Answer</button>\n            </div>\n          </form>\n        </Fragment>\n      ) : (\n        <Fragment>\n          <LinkButton\n            text={'You need to login to add an answer'}\n            link={'/login'}\n            type={'s-btn__outlined'}\n            marginTop={'12px'}\n          />\n        </Fragment>\n      )}\n    </Fragment>\n  );\n};\n\nAnswerForm.propTypes = {\n  auth: PropTypes.object.isRequired,\n  addAnswer: PropTypes.func.isRequired,\n  post: PropTypes.object.isRequired,\n};\n\nconst mapStateToProps = (state) => ({\n  auth: state.auth,\n  post: state.post,\n});\n\nexport default connect(mapStateToProps, {addAnswer})(AnswerForm);\n"]},"metadata":{},"sourceType":"module"}