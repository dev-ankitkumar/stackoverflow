{"ast":null,"code":"import { GET_ANSWERS, ANSWER_ERROR, ADD_ANSWER, DELETE_ANSWER } from './answers.types';\nimport axios from 'axios';\nimport { setAlert } from '../alert/alert.actions';\nimport config from \"../../config\";\nexport const getAnswers = id => async dispatch => {\n  try {\n    const res = await axios.get(config.BASE_URL + `/api/posts/answers/${id}`);\n    dispatch({\n      type: GET_ANSWERS,\n      payload: res.data.data\n    });\n  } catch (err) {\n    dispatch({\n      type: ANSWER_ERROR,\n      payload: {\n        msg: err.response.statusText,\n        status: err.response.status\n      }\n    });\n  }\n}; // Add Answer\n\nexport const addAnswer = (postId, formData) => async dispatch => {\n  const config_headers = {\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  };\n\n  try {\n    const res = await axios.post(config.BASE_URL + `/api/posts/answers/${postId}`, formData, config_headers);\n    dispatch({\n      type: ADD_ANSWER,\n      payload: res.data.data\n    });\n    dispatch(setAlert(res.data.message, 'success'));\n    dispatch(getAnswers(postId));\n  } catch (err) {\n    dispatch(setAlert(err.response.data.message, 'danger'));\n    dispatch({\n      type: ANSWER_ERROR,\n      payload: {\n        msg: err.response.statusText,\n        status: err.response.status\n      }\n    });\n  }\n}; // Delete Answer\n\nexport const deleteAnswer = AnswerId => async dispatch => {\n  try {\n    const res = await axios.delete(config.BASE_URL + `/api/posts/answers/${AnswerId}`);\n    dispatch({\n      type: DELETE_ANSWER,\n      payload: AnswerId\n    });\n    dispatch(setAlert(res.data.message, 'success'));\n  } catch (err) {\n    dispatch(setAlert(err.response.data.message, 'danger'));\n    dispatch({\n      type: ANSWER_ERROR,\n      payload: {\n        msg: err.response.statusText,\n        status: err.response.status\n      }\n    });\n  }\n};","map":{"version":3,"sources":["/home/ankit/Desktop/Ankit/May/may-10/Stackoverflow-Clone-Frontend/src/redux/answers/answers.actions.js"],"names":["GET_ANSWERS","ANSWER_ERROR","ADD_ANSWER","DELETE_ANSWER","axios","setAlert","config","getAnswers","id","dispatch","res","get","BASE_URL","type","payload","data","err","msg","response","statusText","status","addAnswer","postId","formData","config_headers","headers","post","message","deleteAnswer","AnswerId","delete"],"mappings":"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","sourcesContent":["import {\n  GET_ANSWERS,\n  ANSWER_ERROR,\n  ADD_ANSWER,\n  DELETE_ANSWER,\n} from './answers.types';\n\nimport axios from 'axios';\nimport {setAlert} from '../alert/alert.actions';\nimport config from \"../../config\";\n\nexport const getAnswers = (id) => async (dispatch) => {\n  try {\n    const res = await axios.get(config.BASE_URL + `/api/posts/answers/${id}`);\n\n    dispatch({\n      type: GET_ANSWERS,\n      payload: res.data.data,\n    });\n  } catch (err) {\n    dispatch({\n      type: ANSWER_ERROR,\n      payload: {msg: err.response.statusText, status: err.response.status},\n    });\n  }\n};\n\n// Add Answer\nexport const addAnswer = (postId, formData) => async (dispatch) => {\n  const config_headers = {\n    headers: {\n      'Content-Type': 'application/json',\n    },\n  };\n\n  try {\n    const res = await axios.post(\n      config.BASE_URL + `/api/posts/answers/${postId}`,\n      formData,\n      config_headers\n    );\n\n    dispatch({\n      type: ADD_ANSWER,\n      payload: res.data.data,\n    });\n\n    dispatch(setAlert(res.data.message, 'success'));\n\n    dispatch(getAnswers(postId));\n  } catch (err) {\n    dispatch(setAlert(err.response.data.message, 'danger'));\n\n    dispatch({\n      type: ANSWER_ERROR,\n      payload: {msg: err.response.statusText, status: err.response.status},\n    });\n  }\n};\n\n// Delete Answer\nexport const deleteAnswer = (AnswerId) => async (dispatch) => {\n  try {\n    const res = await axios.delete(config.BASE_URL + `/api/posts/answers/${AnswerId}`);\n\n    dispatch({\n      type: DELETE_ANSWER,\n      payload: AnswerId,\n    });\n\n    dispatch(setAlert(res.data.message, 'success'));\n  } catch (err) {\n    dispatch(setAlert(err.response.data.message, 'danger'));\n\n    dispatch({\n      type: ANSWER_ERROR,\n      payload: {msg: err.response.statusText, status: err.response.status},\n    });\n  }\n};\n"]},"metadata":{},"sourceType":"module"}