{"ast":null,"code":"var _jsxFileName = \"/home/ankit/Desktop/Ankit/May/may-10/Stackoverflow-Clone-Frontend/src/components/MarkdownEditor/MarkdownEditor.component.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, forwardRef, useImperativeHandle } from 'react';\nimport RichTextEditor from 'react-rte';\nimport './MarkdownEditor.styles.scss';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst MarkdownEditor = /*#__PURE__*/_s( /*#__PURE__*/forwardRef(_c = _s((props, ref) => {\n  _s();\n\n  const [value, setValue] = useState(RichTextEditor.createEmptyValue());\n  useImperativeHandle(ref, () => ({\n    cleanEditorState() {\n      setValue(RichTextEditor.createEmptyValue());\n    }\n\n  }));\n\n  const onChange = newValue => {\n    setValue(newValue);\n\n    if (props.onChange) {\n      // Send the changes up to the parent component as an HTML string.\n      // This is here to demonstrate using `.toString()` but in a real app it\n      // would be better to avoid generating a string on each change.\n      props.onChange(newValue.toString('html'));\n    }\n  }; // The toolbarConfig object allows you to specify custom buttons, reorder buttons and to add custom css classes.\n  // Supported inline styles: https://github.com/facebook/draft-js/blob/master/docs/Advanced-Topics-Inline-Styles.md\n  // Supported block types: https://github.com/facebook/draft-js/blob/master/docs/Advanced-Topics-Custom-Block-Render.md#draft-default-block-render-map\n\n\n  const toolbarConfig = {\n    // Optionally specify the groups to display (displayed in the order listed).\n    display: ['INLINE_STYLE_BUTTONS', 'BLOCK_TYPE_BUTTONS', 'LINK_BUTTONS' // 'BLOCK_TYPE_DROPDOWN',\n    // 'HISTORY_BUTTONS',\n    ],\n    INLINE_STYLE_BUTTONS: [{\n      label: 'Bold',\n      style: 'BOLD',\n      className: 'button-format'\n    }, {\n      label: 'Italic',\n      style: 'ITALIC',\n      className: 'button-format'\n    }, {\n      label: 'Underline',\n      style: 'UNDERLINE',\n      className: 'button-format'\n    } // {label: 'Monospace', style: 'CODE', className: 'button-format'},\n    ],\n    // BLOCK_TYPE_DROPDOWN: [\n    //   {label: 'Normal', style: 'unstyled'},\n    //   {label: 'Heading Large', style: 'header-one'},\n    //   {label: 'Heading Medium', style: 'header-two'},\n    //   {label: 'Heading Small', style: 'header-three'},\n    // ],\n    BLOCK_TYPE_BUTTONS: [{\n      label: 'UL',\n      style: 'unordered-list-item',\n      className: 'button-format'\n    }, {\n      label: 'OL',\n      style: 'ordered-list-item',\n      className: 'button-format'\n    }, {\n      label: 'Blockquote',\n      style: 'blockquote',\n      className: 'button-format'\n    }, {\n      label: 'Code Block',\n      style: 'code-block',\n      className: 'button-format code-block'\n    }]\n  };\n  return /*#__PURE__*/_jsxDEV(RichTextEditor, {\n    className: \"rich-text-editor-root\",\n    toolbarClassName: \"rich-text-editor-toolbar\",\n    editorClassName: \"rich-text-editor-editor\",\n    toolbarConfig: toolbarConfig,\n    value: value,\n    onChange: onChange\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 5\n  }, this);\n}, \"EOnXzMwRjCnBQFnM6WZdUGhUC+k=\")), \"EOnXzMwRjCnBQFnM6WZdUGhUC+k=\");\n\n_c2 = MarkdownEditor;\nexport default MarkdownEditor;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"MarkdownEditor$forwardRef\");\n$RefreshReg$(_c2, \"MarkdownEditor\");","map":{"version":3,"sources":["/home/ankit/Desktop/Ankit/May/may-10/Stackoverflow-Clone-Frontend/src/components/MarkdownEditor/MarkdownEditor.component.jsx"],"names":["React","useState","forwardRef","useImperativeHandle","RichTextEditor","MarkdownEditor","props","ref","value","setValue","createEmptyValue","cleanEditorState","onChange","newValue","toString","toolbarConfig","display","INLINE_STYLE_BUTTONS","label","style","className","BLOCK_TYPE_BUTTONS"],"mappings":";;;AAAA,OAAOA,KAAP,IAAeC,QAAf,EAAyBC,UAAzB,EAAqCC,mBAArC,QAA+D,OAA/D;AACA,OAAOC,cAAP,MAA2B,WAA3B;AAEA,OAAO,8BAAP;;;AAEA,MAAMC,cAAc,iCAAGH,UAAU,SAAC,CAACI,KAAD,EAAQC,GAAR,KAAgB;AAAA;;AAChD,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBR,QAAQ,CAACG,cAAc,CAACM,gBAAf,EAAD,CAAlC;AAEAP,EAAAA,mBAAmB,CAACI,GAAD,EAAM,OAAO;AAC9BI,IAAAA,gBAAgB,GAAG;AACjBF,MAAAA,QAAQ,CAACL,cAAc,CAACM,gBAAf,EAAD,CAAR;AACD;;AAH6B,GAAP,CAAN,CAAnB;;AAMA,QAAME,QAAQ,GAAIC,QAAD,IAAc;AAC7BJ,IAAAA,QAAQ,CAACI,QAAD,CAAR;;AACA,QAAIP,KAAK,CAACM,QAAV,EAAoB;AAClB;AACA;AACA;AACAN,MAAAA,KAAK,CAACM,QAAN,CAAeC,QAAQ,CAACC,QAAT,CAAkB,MAAlB,CAAf;AACD;AACF,GARD,CATgD,CAmBhD;AACA;AACA;;;AACA,QAAMC,aAAa,GAAG;AACpB;AACAC,IAAAA,OAAO,EAAE,CACP,sBADO,EAEP,oBAFO,EAGP,cAHO,CAIP;AACA;AALO,KAFW;AASpBC,IAAAA,oBAAoB,EAAE,CACpB;AAACC,MAAAA,KAAK,EAAE,MAAR;AAAgBC,MAAAA,KAAK,EAAE,MAAvB;AAA+BC,MAAAA,SAAS,EAAE;AAA1C,KADoB,EAEpB;AAACF,MAAAA,KAAK,EAAE,QAAR;AAAkBC,MAAAA,KAAK,EAAE,QAAzB;AAAmCC,MAAAA,SAAS,EAAE;AAA9C,KAFoB,EAGpB;AAACF,MAAAA,KAAK,EAAE,WAAR;AAAqBC,MAAAA,KAAK,EAAE,WAA5B;AAAyCC,MAAAA,SAAS,EAAE;AAApD,KAHoB,CAIpB;AAJoB,KATF;AAepB;AACA;AACA;AACA;AACA;AACA;AACAC,IAAAA,kBAAkB,EAAE,CAClB;AAACH,MAAAA,KAAK,EAAE,IAAR;AAAcC,MAAAA,KAAK,EAAE,qBAArB;AAA4CC,MAAAA,SAAS,EAAE;AAAvD,KADkB,EAElB;AAACF,MAAAA,KAAK,EAAE,IAAR;AAAcC,MAAAA,KAAK,EAAE,mBAArB;AAA0CC,MAAAA,SAAS,EAAE;AAArD,KAFkB,EAGlB;AAACF,MAAAA,KAAK,EAAE,YAAR;AAAsBC,MAAAA,KAAK,EAAE,YAA7B;AAA2CC,MAAAA,SAAS,EAAE;AAAtD,KAHkB,EAIlB;AACEF,MAAAA,KAAK,EAAE,YADT;AAEEC,MAAAA,KAAK,EAAE,YAFT;AAGEC,MAAAA,SAAS,EAAE;AAHb,KAJkB;AArBA,GAAtB;AAgCA,sBACE,QAAC,cAAD;AACE,IAAA,SAAS,EAAC,uBADZ;AAEE,IAAA,gBAAgB,EAAC,0BAFnB;AAGE,IAAA,eAAe,EAAC,yBAHlB;AAIE,IAAA,aAAa,EAAEL,aAJjB;AAKE,IAAA,KAAK,EAAEP,KALT;AAME,IAAA,QAAQ,EAAEI;AANZ;AAAA;AAAA;AAAA;AAAA,UADF;AAUD,CAhEgC,kCAAb,iCAApB;;MAAMP,c;AAkEN,eAAeA,cAAf","sourcesContent":["import React, {useState, forwardRef, useImperativeHandle} from 'react';\nimport RichTextEditor from 'react-rte';\n\nimport './MarkdownEditor.styles.scss';\n\nconst MarkdownEditor = forwardRef((props, ref) => {\n  const [value, setValue] = useState(RichTextEditor.createEmptyValue());\n\n  useImperativeHandle(ref, () => ({\n    cleanEditorState() {\n      setValue(RichTextEditor.createEmptyValue());\n    },\n  }));\n\n  const onChange = (newValue) => {\n    setValue(newValue);\n    if (props.onChange) {\n      // Send the changes up to the parent component as an HTML string.\n      // This is here to demonstrate using `.toString()` but in a real app it\n      // would be better to avoid generating a string on each change.\n      props.onChange(newValue.toString('html'));\n    }\n  };\n\n  // The toolbarConfig object allows you to specify custom buttons, reorder buttons and to add custom css classes.\n  // Supported inline styles: https://github.com/facebook/draft-js/blob/master/docs/Advanced-Topics-Inline-Styles.md\n  // Supported block types: https://github.com/facebook/draft-js/blob/master/docs/Advanced-Topics-Custom-Block-Render.md#draft-default-block-render-map\n  const toolbarConfig = {\n    // Optionally specify the groups to display (displayed in the order listed).\n    display: [\n      'INLINE_STYLE_BUTTONS',\n      'BLOCK_TYPE_BUTTONS',\n      'LINK_BUTTONS',\n      // 'BLOCK_TYPE_DROPDOWN',\n      // 'HISTORY_BUTTONS',\n    ],\n    INLINE_STYLE_BUTTONS: [\n      {label: 'Bold', style: 'BOLD', className: 'button-format'},\n      {label: 'Italic', style: 'ITALIC', className: 'button-format'},\n      {label: 'Underline', style: 'UNDERLINE', className: 'button-format'},\n      // {label: 'Monospace', style: 'CODE', className: 'button-format'},\n    ],\n    // BLOCK_TYPE_DROPDOWN: [\n    //   {label: 'Normal', style: 'unstyled'},\n    //   {label: 'Heading Large', style: 'header-one'},\n    //   {label: 'Heading Medium', style: 'header-two'},\n    //   {label: 'Heading Small', style: 'header-three'},\n    // ],\n    BLOCK_TYPE_BUTTONS: [\n      {label: 'UL', style: 'unordered-list-item', className: 'button-format'},\n      {label: 'OL', style: 'ordered-list-item', className: 'button-format'},\n      {label: 'Blockquote', style: 'blockquote', className: 'button-format'},\n      {\n        label: 'Code Block',\n        style: 'code-block',\n        className: 'button-format code-block',\n      },\n    ],\n  };\n  return (\n    <RichTextEditor\n      className='rich-text-editor-root'\n      toolbarClassName='rich-text-editor-toolbar'\n      editorClassName='rich-text-editor-editor'\n      toolbarConfig={toolbarConfig}\n      value={value}\n      onChange={onChange}\n    />\n  );\n});\n\nexport default MarkdownEditor;\n"]},"metadata":{},"sourceType":"module"}