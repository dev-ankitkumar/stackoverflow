{"ast":null,"code":"var _jsxFileName = \"/home/ankit/Desktop/Ankit/May/may-10/Stackoverflow-Clone-Frontend/src/pages/Post/QuestionSection/PostCell/PostCell.component.jsx\";\nimport React, { Fragment } from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { Link } from 'react-router-dom';\nimport { deletePost } from '../../../../redux/posts/posts.actions';\nimport TagBadge from '../../../../components/TagBadge/TagBadge.component';\nimport UserCard from '../../../../components/UserCard/UserCard.component';\nimport './PostCell.styles.scss';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst PostCell = _ref => {\n  let {\n    deletePost,\n    auth,\n    post: {\n      post: {\n        id,\n        post_body,\n        tags,\n        gravatar,\n        user_id,\n        username,\n        created_at\n      }\n    }\n  } = _ref;\n  return /*#__PURE__*/_jsxDEV(Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"post-cell\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"post-text fc-black-800\",\n        dangerouslySetInnerHTML: {\n          __html: post_body\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 22,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"post-tags fc-black-800\",\n        children: tags.map((tag, index) => /*#__PURE__*/_jsxDEV(TagBadge, {\n          tag_name: tag.tagname,\n          size: 's-tag',\n          float: 'left'\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 25,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 23,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"post-actions fc-black-800\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"post-actions-extended\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"post-btns\",\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"post-menu\",\n              children: [/*#__PURE__*/_jsxDEV(Link, {\n                className: \"post-links\",\n                title: \"short permalink to this question\",\n                to: \"/\",\n                children: \"share\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 32,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(Link, {\n                className: \"post-links\",\n                title: \"Follow this question to receive notifications\",\n                to: \"/\",\n                children: \"follow\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 39,\n                columnNumber: 17\n              }, this), !auth.loading && auth.isAuthenticated && user_id === auth.user.id && /*#__PURE__*/_jsxDEV(Link, {\n                className: \"s-link s-link__danger\",\n                style: {\n                  paddingLeft: '4px'\n                },\n                title: \"Delete the post\",\n                onClick: e => deletePost(id),\n                to: \"/questions\",\n                children: \"delete\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 49,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 31,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 30,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(UserCard, {\n            created_at: created_at,\n            user_id: user_id,\n            gravatar: gravatar,\n            username: username\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 61,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 29,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 20,\n    columnNumber: 5\n  }, this);\n};\n\n_c = PostCell;\nPostCell.propTypes = {\n  post: PropTypes.object.isRequired,\n  auth: PropTypes.object.isRequired,\n  deletePost: PropTypes.func.isRequired\n};\n\nconst mapStateToProps = state => ({\n  post: state.post,\n  auth: state.auth\n});\n\nexport default connect(mapStateToProps, {\n  deletePost\n})(PostCell);\n\nvar _c;\n\n$RefreshReg$(_c, \"PostCell\");","map":{"version":3,"sources":["/home/ankit/Desktop/Ankit/May/may-10/Stackoverflow-Clone-Frontend/src/pages/Post/QuestionSection/PostCell/PostCell.component.jsx"],"names":["React","Fragment","connect","PropTypes","Link","deletePost","TagBadge","UserCard","PostCell","auth","post","id","post_body","tags","gravatar","user_id","username","created_at","__html","map","tag","index","tagname","loading","isAuthenticated","user","paddingLeft","e","propTypes","object","isRequired","func","mapStateToProps","state"],"mappings":"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","sourcesContent":["import React, {Fragment} from 'react';\nimport {connect} from 'react-redux';\nimport PropTypes from 'prop-types';\nimport {Link} from 'react-router-dom';\nimport {deletePost} from '../../../../redux/posts/posts.actions';\n\nimport TagBadge from '../../../../components/TagBadge/TagBadge.component';\nimport UserCard from '../../../../components/UserCard/UserCard.component';\n\nimport './PostCell.styles.scss';\n\nconst PostCell = ({\n  deletePost,\n  auth,\n  post: {\n    post: {id, post_body, tags, gravatar, user_id, username, created_at},\n  },\n}) => {\n  return (\n    <Fragment>\n      <div className='post-cell'>\n        <div className='post-text fc-black-800' dangerouslySetInnerHTML={{__html: post_body}}></div>\n        <div className='post-tags fc-black-800'>\n          {tags.map((tag, index) => (\n            <TagBadge key={index} tag_name={tag.tagname} size={'s-tag'} float={'left'} />\n          ))}\n        </div>\n        <div className='post-actions fc-black-800'>\n          <div className='post-actions-extended'>\n            <div className='post-btns'>\n              <div className='post-menu'>\n                <Link\n                  className='post-links'\n                  title='short permalink to this question'\n                  to='/'\n                >\n                  share\n                </Link>\n                <Link\n                  className='post-links'\n                  title='Follow this question to receive notifications'\n                  to='/'\n                >\n                  follow\n                </Link>\n                {!auth.loading &&\n                  auth.isAuthenticated &&\n                  user_id === auth.user.id && (\n                    <Link\n                      className='s-link s-link__danger'\n                      style={{paddingLeft: '4px'}}\n                      title='Delete the post'\n                      onClick={(e) => deletePost(id)}\n                      to='/questions'\n                    >\n                      delete\n                    </Link>\n                  )}\n              </div>\n            </div>\n            <UserCard\n              created_at={created_at}\n              user_id={user_id}\n              gravatar={gravatar}\n              username={username}\n            />\n          </div>\n        </div>\n      </div>\n    </Fragment>\n  );\n};\n\nPostCell.propTypes = {\n  post: PropTypes.object.isRequired,\n  auth: PropTypes.object.isRequired,\n  deletePost: PropTypes.func.isRequired,\n};\n\nconst mapStateToProps = (state) => ({\n  post: state.post,\n  auth: state.auth,\n});\n\nexport default connect(mapStateToProps, {deletePost})(PostCell);\n"]},"metadata":{},"sourceType":"module"}