{"ast":null,"code":"var _jsxFileName = \"/home/ankit/Desktop/Ankit/May/may-10/Stackoverflow-Clone-Frontend/src/pages/Post/QuestionSection/CommentCell/CommentCell.component.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, Fragment, useState } from 'react';\nimport moment from 'moment';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { Link } from 'react-router-dom';\nimport { getComments, deleteComment, addComment } from '../../../../redux/comments/comments.actions';\nimport Spinner from '../../../../components/Spinner/Spinner.component';\nimport TagBadge from '../../../../components/TagBadge/TagBadge.component';\nimport LinkButton from '../../../../components/LinkButton/LinkButton.component';\nimport './CommentCell.styles.scss';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst CommentCell = _ref => {\n  _s();\n\n  let {\n    deleteComment,\n    addComment,\n    getComments,\n    auth,\n    comment,\n    post: {\n      post\n    }\n  } = _ref;\n  useEffect(() => {\n    getComments(post.id); // eslint-disable-next-line\n  }, [getComments]);\n  const [formData, setFormData] = useState({\n    body: ''\n  });\n  const {\n    body\n  } = formData;\n\n  const handleChange = e => setFormData({ ...formData,\n    [e.target.name]: e.target.value\n  });\n\n  const handleSubmit = async e => {\n    e.preventDefault();\n    addComment(post.id, {\n      body\n    });\n    setFormData({\n      body: ''\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"comments-cell\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"comments\",\n        children: /*#__PURE__*/_jsxDEV(\"ul\", {\n          className: \"comments-list\",\n          children: comment.loading === null ? /*#__PURE__*/_jsxDEV(Spinner, {\n            width: \"25px\",\n            height: \"25px\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 54,\n            columnNumber: 15\n          }, this) : comment.comments.map((comment, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n            className: \"comments-item\",\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"comment-text fc-black-800\",\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"comment-body\",\n                children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"body\",\n                  children: comment.body\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 60,\n                  columnNumber: 23\n                }, this), \"\\xA0\\u2013\\xA0\", /*#__PURE__*/_jsxDEV(TagBadge, {\n                  tag_name: comment.username,\n                  size: 's-tag',\n                  link: `/users/${comment.user_id}`,\n                  display: 'inline'\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 62,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                  title: moment(comment.created_at).fromNow(true),\n                  style: {\n                    color: '#959ca3 !important'\n                  },\n                  className: \"date fs-body1\",\n                  children: [moment(comment.created_at).fromNow(true), \" ago\"]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 68,\n                  columnNumber: 23\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 59,\n                columnNumber: 21\n              }, this), !auth.loading && auth.isAuthenticated && comment.user_id === auth.user.id && /*#__PURE__*/_jsxDEV(Link, {\n                className: \"s-tag s-tag__moderator\",\n                style: {\n                  marginTop: '4px'\n                },\n                title: \"Delete the comment\",\n                onClick: e => deleteComment(comment.id),\n                to: `/questions/${post.id}`,\n                children: \"delete\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 79,\n                columnNumber: 25\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 58,\n              columnNumber: 19\n            }, this)\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 57,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"add-comment\",\n        children: !auth.loading && auth.isAuthenticated ? /*#__PURE__*/_jsxDEV(Fragment, {\n          children: /*#__PURE__*/_jsxDEV(\"form\", {\n            className: \"comment-form\",\n            onSubmit: e => handleSubmit(e),\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              children: /*#__PURE__*/_jsxDEV(\"input\", {\n                className: \"title-input s-input\",\n                type: \"text\",\n                name: \"body\",\n                value: body,\n                onChange: e => handleChange(e),\n                id: \"title\",\n                placeholder: \"Leave a comment\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 100,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 99,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 98,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 13\n        }, this) : /*#__PURE__*/_jsxDEV(Fragment, {\n          children: /*#__PURE__*/_jsxDEV(LinkButton, {\n            text: 'You need to login to add a comment',\n            link: '/login'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 114,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 113,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 5\n  }, this);\n};\n\n_s(CommentCell, \"eqkv7AAaKGTpa6fifMMvgRWodWM=\");\n\n_c = CommentCell;\nCommentCell.propTypes = {\n  auth: PropTypes.object.isRequired,\n  post: PropTypes.object.isRequired,\n  addComment: PropTypes.func.isRequired,\n  deleteComment: PropTypes.func.isRequired,\n  getComments: PropTypes.func.isRequired,\n  comment: PropTypes.object.isRequired\n};\n\nconst mapStateToProps = state => ({\n  auth: state.auth,\n  post: state.post,\n  comment: state.comment\n});\n\nexport default connect(mapStateToProps, {\n  deleteComment,\n  getComments,\n  addComment\n})(CommentCell);\n\nvar _c;\n\n$RefreshReg$(_c, \"CommentCell\");","map":{"version":3,"sources":["/home/ankit/Desktop/Ankit/May/may-10/Stackoverflow-Clone-Frontend/src/pages/Post/QuestionSection/CommentCell/CommentCell.component.jsx"],"names":["React","useEffect","Fragment","useState","moment","connect","PropTypes","Link","getComments","deleteComment","addComment","Spinner","TagBadge","LinkButton","CommentCell","auth","comment","post","id","formData","setFormData","body","handleChange","e","target","name","value","handleSubmit","preventDefault","loading","comments","map","index","username","user_id","created_at","fromNow","color","isAuthenticated","user","marginTop","propTypes","object","isRequired","func","mapStateToProps","state"],"mappings":"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","sourcesContent":["import React, {useEffect, Fragment, useState} from 'react';\nimport moment from 'moment';\nimport {connect} from 'react-redux';\nimport PropTypes from 'prop-types';\nimport {Link} from 'react-router-dom';\nimport {\n  getComments,\n  deleteComment,\n  addComment,\n} from '../../../../redux/comments/comments.actions';\n\nimport Spinner from '../../../../components/Spinner/Spinner.component';\nimport TagBadge from '../../../../components/TagBadge/TagBadge.component';\nimport LinkButton from '../../../../components/LinkButton/LinkButton.component';\n\nimport './CommentCell.styles.scss';\n\nconst CommentCell = ({\n  deleteComment,\n  addComment,\n  getComments,\n  auth,\n  comment,\n  post: {post},\n}) => {\n  useEffect(() => {\n    getComments(post.id);\n    // eslint-disable-next-line\n  }, [getComments]);\n\n  const [formData, setFormData] = useState({\n    body: '',\n  });\n\n  const {body} = formData;\n\n  const handleChange = (e) =>\n    setFormData({...formData, [e.target.name]: e.target.value});\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    addComment(post.id, {body});\n    setFormData({\n      body: '',\n    });\n  };\n\n  return (\n    <Fragment>\n      <div className='comments-cell'>\n        <div className='comments'>\n          <ul className='comments-list'>\n            {comment.loading === null ? (\n              <Spinner width='25px' height='25px' />\n            ) : (\n              comment.comments.map((comment, index) => (\n                <li key={index} className='comments-item'>\n                  <div className='comment-text fc-black-800'>\n                    <div className='comment-body'>\n                      <span className='body'>{comment.body}</span>\n                      &nbsp;&ndash;&nbsp;\n                      <TagBadge\n                        tag_name={comment.username}\n                        size={'s-tag'}\n                        link={`/users/${comment.user_id}`}\n                        display={'inline'}\n                      />\n                      <span\n                        title={moment(comment.created_at).fromNow(true)}\n                        style={{color: '#959ca3 !important'}}\n                        className='date fs-body1'\n                      >\n                        {moment(comment.created_at).fromNow(true)} ago\n                      </span>\n                    </div>\n                    {!auth.loading &&\n                      auth.isAuthenticated &&\n                      comment.user_id === auth.user.id && (\n                        <Link\n                          className='s-tag s-tag__moderator'\n                          style={{marginTop: '4px'}}\n                          title='Delete the comment'\n                          onClick={(e) => deleteComment(comment.id)}\n                          to={`/questions/${post.id}`}\n                        >\n                          delete\n                        </Link>\n                      )}\n                  </div>\n                </li>\n              ))\n            )}\n          </ul>\n        </div>\n        <div className='add-comment'>\n          {!auth.loading && auth.isAuthenticated ? (\n            <Fragment>\n              <form className='comment-form' onSubmit={(e) => handleSubmit(e)}>\n                <div>\n                  <input\n                    className='title-input s-input'\n                    type='text'\n                    name='body'\n                    value={body}\n                    onChange={(e) => handleChange(e)}\n                    id='title'\n                    placeholder='Leave a comment'\n                  />\n                </div>\n              </form>\n            </Fragment>\n          ) : (\n            <Fragment>\n              <LinkButton\n                text={'You need to login to add a comment'}\n                link={'/login'}\n              />\n            </Fragment>\n          )}\n        </div>\n      </div>\n    </Fragment>\n  );\n};\n\nCommentCell.propTypes = {\n  auth: PropTypes.object.isRequired,\n  post: PropTypes.object.isRequired,\n  addComment: PropTypes.func.isRequired,\n  deleteComment: PropTypes.func.isRequired,\n  getComments: PropTypes.func.isRequired,\n  comment: PropTypes.object.isRequired,\n};\n\nconst mapStateToProps = (state) => ({\n  auth: state.auth,\n  post: state.post,\n  comment: state.comment,\n});\n\nexport default connect(mapStateToProps, {\n  deleteComment,\n  getComments,\n  addComment,\n})(CommentCell);\n"]},"metadata":{},"sourceType":"module"}